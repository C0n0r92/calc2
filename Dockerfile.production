# Production-optimized single image with both frontend and backend
# Uses multi-stage builds to remove build dependencies

# Stage 1: Build Frontend
FROM node:18-alpine AS frontend-builder
WORKDIR /app
COPY webapp/package*.json ./
RUN npm ci && npm cache clean --force
COPY webapp/ ./
RUN npm run build

# Stage 2: Build Backend (with build tools)
FROM ruby:3.2.2-alpine AS backend-builder
RUN apk add --no-cache build-base postgresql-dev
WORKDIR /app
COPY backend-api/Gemfile backend-api/Gemfile.lock ./
RUN bundle config --global frozen 1 && \
    bundle config set --local without 'development test' && \
    bundle install --jobs 4 --retry 3 && \
    bundle clean --force
COPY backend-api/ ./

# Stage 3: Production Runtime (NO build tools)
FROM ruby:3.2.2-alpine
LABEL maintainer="Mortgage Calculator App"

# Install ONLY runtime dependencies
RUN apk add --no-cache \
    postgresql-client \
    nginx \
    supervisor \
    tzdata && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1000 appgroup && \
    adduser -u 1000 -G appgroup -s /bin/sh -D appuser

WORKDIR /app

# Copy Rails app from builder (without build dependencies)
COPY --from=backend-builder --chown=appuser:appgroup /usr/local/bundle /usr/local/bundle
COPY --from=backend-builder --chown=appuser:appgroup /app ./

# Copy frontend build
COPY --from=frontend-builder --chown=appuser:appgroup /app/dist ./public

# Create optimized nginx config
RUN echo 'server { \
    listen 80; \
    root /app/public; \
    index index.html; \
    \
    location /api/ { \
        proxy_pass http://127.0.0.1:3000; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
    \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    \
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ { \
        expires 1y; \
        add_header Cache-Control "public, immutable"; \
    } \
}' > /etc/nginx/http.d/default.conf

# Create supervisor config for running both services
RUN echo '[supervisord] \
nodaemon=true \
user=root \
\
[program:nginx] \
command=nginx -g "daemon off;" \
autostart=true \
autorestart=true \
user=root \
\
[program:rails] \
command=bundle exec rails server -b 127.0.0.1 -p 3000 \
directory=/app \
autostart=true \
autorestart=true \
user=appuser \
environment=RAILS_ENV=production,RAILS_LOG_TO_STDOUT=true' > /etc/supervisord.conf

# Create startup script
RUN echo '#!/bin/sh \
set -e \
echo "Running database migrations..." \
su-exec appuser bundle exec rails db:migrate 2>/dev/null || echo "Migrations failed or DB not available" \
echo "Starting services..." \
exec supervisord -c /etc/supervisord.conf' > /app/start.sh && \
    chmod +x /app/start.sh

# Set environment variables
ENV RAILS_ENV=production \
    RAILS_SERVE_STATIC_FILES=false \
    RAILS_LOG_TO_STDOUT=true \
    PORT=80

EXPOSE 80

# Start both nginx and rails
CMD ["/app/start.sh"]
